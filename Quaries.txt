Students Table
CREATE TABLE students (
 student_id INT AUTO_INCREMENT PRIMARY KEY,
 name VARCHAR(100) NOT NULL,
 age INT,
 email VARCHAR(100) UNIQUE,
 phone VARCHAR(15) UNIQUE
);
Courses Table
CREATE TABLE courses (
 course_id INT AUTO_INCREMENT PRIMARY KEY,
 course_name VARCHAR(100) NOT NULL,
 instructor VARCHAR(100),
 duration VARCHAR(50) 
);
Enrollments Table (Tracks which student is enrolled in which course)
CREATE TABLE enrollments (
 enrollment_id INT AUTO_INCREMENT PRIMARY KEY,
 student_id INT,
 course_id INT,
 enrollment_date DATE DEFAULT (CURDATE()),
 FOREIGN KEY (student_id) REFERENCES students(student_id) ON DELETE
CASCADE,
 FOREIGN KEY (course_id) REFERENCES courses(course_id) ON DELETE CASCADE
);
Grades Table (Stores student grades)
CREATE TABLE grades (
 grade_id INT AUTO_INCREMENT PRIMARY KEY,
 student_id INT,
 course_id INT,
 grade VARCHAR(2), 
 FOREIGN KEY (student_id) REFERENCES students(student_id) ON DELETE
CASCADE,
 FOREIGN KEY (course_id) REFERENCES courses(course_id) ON DELETE CASCADE
);
Insert Sample Data
Insert Students
INSERT INTO students (name, age, email, phone) VALUES
('Alice Johnson', 21, 'alice@.com', '9876543210'),
('Bob Smith', 22, 'bob@.com', '9876543211'),
('Charlie Brown', 20, 'charlie@.com', '9876543212');
Insert Courses
INSERT INTO courses (course_name, instructor, duration) VALUES
('Database Management', 'Dr. Rajesh Kumar', '3 months'),
('Web Development', 'Ms. Priya Sharma', '4 months'),
('Python Programming', 'Mr. Anil Mehta', '2 months');
Insert Enrollments
INSERT INTO enrollments (student_id, course_id) VALUES
(1, 1), -- Alice enrolled in Database Management
(2, 2), -- Bob enrolled in Web Development
(3, 3), -- Charlie enrolled in Python Programming
(1, 3), -- Alice also enrolled in Python Programming
(2, 1); -- Bob also enrolled in Database Management
Insert Grades
INSERT INTO grades (student_id, course_id, grade) VALUES
(1, 1, 'A'),
(2, 2, 'B'),
(3, 3, 'A'),
(1, 3, 'B'),
(2, 1, 'C');
Queries to Fetch Data
View All Students with Enrolled Courses
SELECT students.name, courses.course_name, enrollments.enrollment_date
FROM students
JOIN enrollments ON students.student_id = enrollments.student_id
JOIN courses ON enrollments.course_id = courses.course_id;
Get Grades of Each Student
SELECT students.name, courses.course_name, grades.grade
FROM students
JOIN grades ON students.student_id = grades.student_id
JOIN courses ON grades.course_id = courses.course_id;
Count How Many Students Enrolled in Each Course
SELECT courses.course_name, COUNT(enrollments.student_id) AS total_students
FROM courses
LEFT JOIN enrollments ON courses.course_id = enrollments.course_id
GROUP BY courses.course_id;
Find Students with ‘A’ Grade
SELECT students.name, courses.course_name
FROM students
JOIN grades ON students.student_id = grades.student_id
JOIN courses ON grades.course_id = courses.course_id
WHERE grades.grade = 'A';